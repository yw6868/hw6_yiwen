subroutine Matrix_multip.f90

   integer, dimension(3,3) :: a, b, c
   integer :: i, j
    
   do i = 1, 3
      do j = 1, 3
         a(i, j) = i+j
      end do
   end do
   end subroutine Matrix_multip
   
   print *, 'Matrix Multiplication: A Matrix'


Program Main.f90
   open（3，file="/work/ese-ouycc/fortran_2/M.dat"）
   do i=1,4
       read(3,*) a(i),b(i),c(i)
       M(1,i)=a(i)
       M(2,i)=b(i)
       M(3,i)=c(i)
   end do
   close(3)

   open（4，file="/work/ese-ouycc/fortran_2/M.dat"）
   do i=1,3
       read(4,*) a(i),b(i),c(i)
       M(1,i)=a(i)
       M(2,i)=b(i)
       M(3,i)=c(i)
   end do
   close(4)



   call Matrix_multip(A_tran,B_tran,0)
   A_tran=transpose(A)
   B_tran=transpose(B)
   open(5,file='MN.dat',status='replace')
   do i=1,4
       print *,0(i,:)
       write(5,'(f8.1,f8.1,f8.1)') 0(i,:)
   end do
   close(5)





   module Declination_angle

   implicit none 

   real, parameter :: pi = 3.1415926536  
   
   contains 
   Integer Function DaysInYear(year, mon, day)
      Integer :: year, mon , day
      Integer :: DaysInMonth(12) = [31,28,31,30,31,30,31,31,30,31,30,31]
      if ( ( (MOD(year,4)==0).and.(MOD(year,100)/=0) ) .or. (mod(year,400)==0) ) then
         DaysInMonth(2) = 29
      else
         DaysInMonth(2) = 28
      end if
      DaysInYear = sum( DaysInMonth(:mon-1) ) + day
   End Function DaysInYear

   ! 计算declination angle     
   real(8) Function DecAngle(year, n)          
      Integer :: year, n
      real    :: temp
      ! 转化为弧度制
      if ( ( (MOD(year,4)==0).and.(MOD(year,100)/=0) ) .or. (mod(year,400)==0) ) then
         temp = (n + 284) * 360 * pi / (366 * 180)
      else
         temp = (n + 284) * 360 * pi / (365 * 180)
      end if
      DecAngle = 23.45 *  sin(temp)       
   end Function DecAngle 
   
end module Declination_angle


module AST

implicit none

   real, parameter :: pi = 3.1415926536

contains
   ! Local Solar Time
   Function ASTIME(Long, direct, DMT, year, hour, min, day)
      logical :: direct
      Integer :: ASTIME(2)
      Integer :: DMT, year, hour, min, day, LSTM, temp
      real(8) :: D, ET, Long, tt
      ! Change the formula depending on whether it's a leap year
      if ( ( (MOD(year,4)==0).and.(MOD(year,100)/=0) ) .or. (mod(year,400)==0) ) then
         D =360 * (dble(day) - 81) / 366
      else
         D =360 * (dble(day) - 81) / 365
      end if
      ET = 9.87 * sin(2*D*pi/180) - 7.53 * cos(D*pi/180) - 1.5 * sin(D*pi/180)
      if(direct .eqv. .true.) then
	Long = -Long
      else
	Long = Long
      endif
      LSTM = 15 * DMT
      temp = 4 * (Long - LSTM) + ET
      ASTIME(1) = hour + INT(temp/60)
      ASTIME(2) = min + MOD(temp, 60)

      if(ASTIME(2) > 60) then
	ASTIME(1) = ASTIME(1) + 1
	ASTIME(2) = ASTIME(2) - 60
      elseif(ASTIME(2) < 0) then
	ASTIME(1) = ASTIME(1) - 1
	ASTIME(2) = 60 + ASTIME(2)
      else
	ASTIME(1) = ASTIME(1) 
	ASTIME(2) = ASTIME(2)
      endif
      if(ASTIME(1) >= 24)then
	ASTIME(1) = ASTIME(1)  - 24
      else
	ASTIME(1) = ASTIME(1)
      endif
      print*, "D = ", D          
      print*,  "ET = ", ET  
      print*, "LSTM = ", LSTM          
   End Function ASTIME
end module AST



program FunctionTest
use Declination_angle
use AST
implicit none

logical :: direct
Integer :: DMT, year, month, date, hour, min, day
real(8) :: DA, Long, Lat, H, SAA, SZA
Integer :: ApparentST(2)
real    :: p

p = 3.1415926536

write(*,*) 'Please input the year:'
read(*,*) year

write(*,*) 'Please input the month:'
read(*,*) month

write(*,*) 'Please input the date:'
read(*,*) date

write(*,*) 'Please input the hour:'
read(*,*) hour

write(*,*) 'Please input the minute:'
read(*,*) min

write(*,*) 'Please input the Time Zone(West -12 ---- 12 East):'
read(*,*) DMT

write(*,*) 'In the western longitudes? (please input ".true." or ".false.")'
read(*,*) direct

write(*,*) 'Please input the Longitude:'
read(*,*) Long

write(*,*) 'Please input the Latitude:'
read(*,*) Lat

day = DaysInYear(year, month, date)
write(*,*) 'The day in this year is: ', day

DA = DecAngle(year, day)
write(*,*) 'The declination angle is: ', DA, 'Deg'

ApparentST = ASTIME(Long, direct, DMT, year, hour, min, day)
write(*,*) 'The apparent solar time(AST) is: ', ApparentST(1), ':', ApparentST(2)

H = ((60 * dble(ApparentST(1)) + dble(ApparentST(2))) - 720)/4
write(*,*) 'The hour angle(H) is: ', H

SAA = asin(cos(Lat*p/180)*cos(DA*p/180)*cos(H*p/180) + sin(Lat*p/180) * sin(DA*p/180))
SAA = SAA * 180 / p
write(*,*) 'The  altitude angle is: ', SAA

SZA = 90 - SAA
write(*,*) 'The zenith angle(SZA) is: ', SZA


end program FunctionTest